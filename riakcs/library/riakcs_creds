#!/usr/bin/python
# -*- coding: utf-8 -*-

# (c) 2013, James Martin <jmartin@basho.com>
#
# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
#
DOCUMENTATION = '''
---
module: RiakCS
short_description: This module handles some common RiakCS operations
description:
     - This module is primarily used for the generation of admin user
     credentials

version_added: "1.2"
options:
  admin_id:
    description:
      - The admin userid you want to add
    required: true
    default: admin
    aliases: []
  admin_email:
    description:
      - The email address of the admin you want to add
    required: true
    default: admin@admin.com
    aliases: []
  admin_key:
    description:
      - authentication key id
    required: true
    default: foo
    aliases: []
  admin_secret:
    description:
      - authentication secret key
    required: true
    default: foo
    aliases: []
  command:
    description:
      - The command you want to run
      required: true
    default: None
    aliases: []
    choices: [ 'create', 'update']
  path:
    description:
      - The path to the var file
    required: true
    default: ../group_vars/all
    aliases: []
'''

import os.path
import urllib2
import json
import time


def main():

    ansible_facts = {}
    arg_spec = dict(
        admin_id=dict( default="admin"),
        admin_email=dict( default="admin@admin.com"),
        path=dict(default='group_vars/riakcs_cluster'),
        admin_key=dict(default='foo'),
        admin_secret=dict(default='bar'),
        conn=dict( default='127.0.0.1:8080'),
        command=dict(required=False, default=None, choices=[
                    'create', 'update'])

    )

    module = AnsibleModule(argument_spec=arg_spec)
    command = module.params.get('command')

    if command == 'create':
        admin_id = module.params.get('admin_id')
        admin_email = module.params.get('admin_email')
        conn = module.params.get('conn')
        data = { 'email' : admin_email, 'name' : admin_id}
        url = 'http://%s/riak-cs/user' % (conn)
        req = urllib2.Request(url)
        req.add_data(json.dumps(data))
        req.add_header('Content-Type', 'application/json')


        try:
            response_raw = urllib2.urlopen(req , None, 5).read()
        except urllib2.HTTPError, e:
            if e.code == 409:
                err='The username "%s" already exists.' % admin_id
                module.fail_json(msg=err)
            else:
                err='There was a problem creating the user, HTTP error code %s' % str(e.code)
            module.fail_json(msg=err)
        except urllib2.URLError, e:
            err='Could not create the admin user: %s' % e.args
            module.fail_json(msg=err)
        except Exception, e:
            module.fail_json(msg="Could not create admin user")


        response = json.loads(response_raw)

        result ={ 'admin_key': response['key_id'] , 'admin_secret': response['key_secret'], 'changed' :True }

    elif command == 'update':

        import yaml
        path = module.params.get('path')
        admin_key = module.params.get('admin_key')
        admin_secret = module.params.get('admin_secret')
        file = open(path, 'r')
        data = yaml.load(file.read())
        file.close()

        data['riakcs']['admin_key'] = admin_key
        data['riakcs']['admin_secret'] = admin_secret

        file = open(path, 'w')
        file.write(yaml.dump(data, default_flow_style=False))
        file.close()

        result = {'changed' : True }
    else:
        module.fail_json(msg="You must choose a valid action (create/update)")

    module.exit_json(**result)

# this is magic, see lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>

main()
